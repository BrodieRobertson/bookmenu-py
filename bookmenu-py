#!/usr/bin/env python3
import os
from subprocess import Popen, PIPE, STDOUT
import argparse
import sys
import shutil
import json

defaultBrowser = "firefox"
defaultLauncher = "dmenu"
defaultTerminal = "xterm"
defaultSeperator = ","
defaultUseTerminal = False
defaultConfigPath = "~/.config/bookmenu/config"
defaultFilePath = "~/.config/bookmenu/bookmarks" 

def getArgs():
    """Parses the arguments taken in from the command line"""
    parser = argparse.ArgumentParser(
        prog = "bookmenu-py",
        description = "Typically used to seperate out your bookmarks from your browser " +
        "however may be suitable handling shorcuts to access files"
    )

    parser.add_argument(
        "-o",
        "--bookmark",
        help = "Selects which bookmark to open skipping the selection dialogue",
        metavar = "BOOKMARK"
    )

    parser.add_argument(
        "-u",
        "--url",
        help = "Skips selecting a bookmark and just loads an url directly",
        metavar = "BOOKMARK"
    )

    parser.add_argument(
        "-f",
        "--filePath",
        help = "Selects which file should be searched for bookmarks, the default"+
        " path is " + defaultFilePath,
        metavar = "FILE",
    )
     
    parser.add_argument(
        "-s",
        "--seperator",
        help = "Selects what bookmark seperator should be used, any character is supported"+
        " however it's recommended to choose something which is not a special character in"+
        " your bookmark format",
        metavar = "SEPERATOR",
    )
    
    parser.add_argument(
        "-l" ,
        "--launcher",
        help = "Sets the launcher to be used to select a bookmark to open, dmenu, rofi and tofi," +
        " are known to work but any app that accepts new line seperated data should" +
        " theorectically function, default value is " + defaultLauncher + " if set $LAUNCHER" +
        " will be used instead",
        metavar = "LAUNCHER",
    )
     
    parser.add_argument(
        "-b",
        "--browser",
        help = "Sets the application used for opening the bookmark, browsers were the initial" +
        " intended use but works with anything that supports opening files in the" +
        " BROWSER BOOKMARK format, most text editors will also work, default value is " +
        defaultBrowser + " if set $BROWSER will be used instead",
        metavar = "BROWSER",
    )
    
    parser.add_argument(
        "-t",
        "--terminal",
        help = "Sets the terminal to be used when launching a terminal based browser" +
        " only terminals which support -e for opening an app on launch are supported" +
        ", this should include most reasonable browsers, by default it is set to " + defaultTerminal +
        " if set $TERM will be used instead",
        metavar = "TERMINAL",
    )
    
    parser.add_argument(
        "-e",
        "--useTerminal",
        help = "Tells bookmenu that you wish to launch your browser from a terminal" +
        " in most cases this is uneeded however it may come in handy if you wish to launch a" +
        " file instead of a browser bookmark",
        choices=["true", "false"]
    )
     
    parser.add_argument(
        "-i",
        "--list",
        help = "Lists out all the bookmarks in the selected file, can be useful when skipping" +
        " launcher to open to open a bookmark directly",
        action = "store_true"
    )
    
    parser.add_argument(
        "-a",
        "--addBookmark",
        nargs = 2,
        help = "Adds a new bookmark into the selected bookmarks file",
        metavar = ["NAME", "URL"]
    )
    
    parser.add_argument(
        "-r",
        "--removeBookmark", 
        help = "Removes this book bookmark from the selected bookmarks file" 
    )
    
    parser.add_argument(
        "-c",
        "--config",
        help = "Sets the location of the config file, by default it is located at" + defaultConfigPath
    )

    args = parser.parse_args()

    return args

def missingBookmarksFile(filePath): 
    """Provides error handling for a missing bookmarks file"""
    print("Bookmarks file: " + '"' + filePath + '"' + " does not exist", file=sys.stderr)
    exit()
    
def missingLauncherFile(launcher):
    """Provides error handling for a missing launcher"""
    print("Launcher: " + '"' + launcher + '"' + " not found", file=sys.stderr)            
    exit()
    
def missingBrowserFile(browser): 
    """Provides error handling for a missing browser"""
    print("Browser: " + '"' + browser + "'" +  " does not exist", file=sys.stderr)
    exit()
    
def missingConfigFile(configPath):
    """Provides error handing for a missing config file"""
    print("Config File: "  + '"' + configPath + '"' + " does not exist", file=sys.stderr)
    exit()

def parseRegularConfig(file, configDictionary):
    """Parses the standard configuration file for values"""
    index = 0
    for line in file:
        index += 1
        # Check for comments and empty lines
        if line[0] == "#" or line == "\n":
            continue
        else:
            configLine = line.split("=")
            # Check for malformed lines
            if len(configLine) != 2:
                print("Missing key or value on line " + str(index))
                continue
            if configLine[0][0] == " ":
                print("Line " + str(index) + " begins with a space, skipping")
                continue
            
            configLine[0] = configLine[0].strip()
            configLine[1] = configLine[1].strip()
            if configLine[0] not in configDictionary:
                print("On line " + str(index) + " " + '"' + configLine[0] + '"' + " is an invalid key")
                continue

            # Special handle boolean values
            if configLine[0] == "useTerminal":
                boolean = stringToBoolean(configLine[1])
                if boolean is None:
                    print("On line " + str(index) + " useTerminal must be true or false")
                    continue
                else:
                    configDictionary[configLine[0]] = boolean
            # Set each config value
            else:
                configDictionary[configLine[0]] = configLine[1]

    return configDictionary

def parseJSONConfig(jsonData, configDictionary):
    """Parses the JSON configuration file for values"""
    for key, value in jsonData.items():
        if key in configDictionary:
            if key == "useTerminal":
                if isinstance(value, bool):
                    configDictionary[key] = value
                else:
                    print("\"useTerminal must be set to a boolean\"")
            else:
                if isinstance(value, str):
                    configDictionary[key] = value
                else:
                    print('"' + key + '"' + " must be set to a string")
        else:
            print('"' + key + '"' + " is an invalid key")
    return configDictionary

def stringToBoolean(string):
    """Converts a string into a boolean or None if invalid"""
    string = string.lower()
    validValues = {
        "true": True,
        "false": False
    }
    if string in validValues:
        return validValues[string]
    else:
        return None

def getConfigs(configPath):
    """Loads in all the settings from the config file"""
    
    configDictionary = {
        "browser": None,
        "terminal": None,
        "useTerminal": None,
        "launcher": None,
        "seperator": None,
        "filePath": None 
    }
    try:
        f = open(configPath, "r")
    except FileNotFoundError:
        missingConfigFile(configPath)
    else:
        with open(configPath) as configFile:
            try:
                jsonData = json.load(configFile)        
                return parseJSONConfig(jsonData, configDictionary)
            except json.JSONDecodeError:
                configFile.seek(0)
                return parseRegularConfig(configFile, configDictionary)
    
def findBookmark(bookmarkName, seperator, filePath):
    """Finds a bookmark within a bookmarks file from it's name"""

    # Error early if bookmark name is empty 
    if bookmarkName == "":
        print("No bookmark selected", file=sys.stderr)
        exit()

    foundBookmark = False
    try:
        f = open(filePath, "r")
    except FileNotFoundError:
        missingBookmarksFile(filePath)
    else:
        with open(filePath, "r") as bookmarksFile:
            for line in bookmarksFile:
                bookmark = line.split(seperator)
                if len(bookmark) == 2 and bookmark[0] == bookmarkName:
                    foundBookmark = True
                    # Grab the URL
                    return bookmark[1].rstrip()
    
    if foundBookmark is not True:
        print("Bookmark: " + '"' + bookmarkName + "'" +  " does not exist", file=sys.stderr)
        exit()
        
def openBookmark(bookmarkURL, browser, terminal = None):
    """Opens the selected bookmark within the browser of choice"""

    # Python really doesn't like shortened home directories 
    if bookmarkURL[0] == "~":
        bookmarkURL = os.path.expanduser(bookmarkURL)

    try:  
        if terminal is None:
            Popen([browser, bookmarkURL])
        else:
            Popen([terminal, "-e", browser, bookmarkURL])

    except FileNotFoundError:
        missingBrowserFile(browser)
        
def alphabeticallySortList(bookmarksList):
    """Alphabetically sorts the bookmark file for better user readability"""
    # Sort string into alphabetical order
    bookmarksList.sort()
    alpheticalString = ""
    for bookmark in bookmarksList:
        alpheticalString = alpheticalString + bookmark
    
    return alpheticalString

def convertToList(filePath, seperator):
    """Converts the bookmarks file into a consisten displayable format"""
    convertedList = []
    try:
        f = open(filePath, "r")
    except FileNotFoundError:
        missingBookmarksFile(filePath)
    else:
        with open(filePath, "r") as bookmarksFile:
            for line in bookmarksFile:
                bookmark = line.split(seperator)
                if len(bookmark) == 2:
                    convertedList.append(bookmark[0] + ": " + bookmark[1])
    
    # Guard against opening launcher with no bookmarks
    if len(convertedList) == 0:
        print("No bookmarks found, check if the file name " + '"' + filePath + '"' +
        " and seperator " + '"' + seperator + '"' + " are correct", file=sys.stderr)
        exit()
 
    return alphabeticallySortList(convertedList)
    
def convertToNewLineSeperated(filePath, seperator):
    """Converts the bookmarks file into a clean new line seperated list of bookmark names"""
    convertedList = []
    try:
        f = open(filePath, "r")
    except FileNotFoundError:
        missingBookmarksFile(filePath)
    else:
        with open(filePath, "r") as bookmarksFile:
            for line in bookmarksFile:
                bookmark = line.split(seperator)
                if len(bookmark) == 2:
                    convertedList.append(bookmark[0] + "\n")
    
    # Guard against opening launcher with no bookmarks
    if len(convertedList) == 0:
        print("No bookmarks found, check if the file name " + '"' + filePath + '"' +
        " and seperator " + '"' + seperator + '"' + " are correct", file=sys.stderr)
        exit()
 
    return alphabeticallySortList(convertedList)

def addBookmark(filePath, seperator, newBookmark): 
    """Adds a bookmark into the selected bookmarks file"""
    try:
        f = open(filePath, "a")
    except FileNotFoundError:
        missingBookmarksFile(filePath)
    else: 
        with open(filePath, "a") as bookmarksFile:
            bookmarksFile.write(newBookmark[0] + seperator + newBookmark[1])
            
def removeBookmark(filePath, seperator, removeBookmark):
    """Removes a bookmark from the selected bookmarks file"""
    foundBookmark = False
    modifiedBookmarks = ""
    try: 
        f = open(filePath, "r+")
    except FileNotFoundError:
        missingBookmarksFile(filePath)
    else: 
        with open(filePath, "r+") as bookmarksFile:
            for line in bookmarksFile:
                currentBookmark = line.split(seperator)
                if currentBookmark[0] != removeBookmark:
                    modifiedBookmarks = modifiedBookmarks + line
                else:
                    foundBookmark = True
            
            if foundBookmark is True:
                bookmarksFile.seek(0)
                bookmarksFile.truncate()
                bookmarksFile.write(modifiedBookmarks)
            else:
                print("Bookmark: " + "'" + removeBookmark + "'" + " does not exist", file=sys.stderr)
                exit()
    
def main():
    """Starting point of the bookmenu application"""
    args = getArgs()
    bookmarkURL = args.url
    bookmarkName = args.bookmark

    # Sets config path 
    if args.config is not None:
        configPath = os.path.expanduser(args.config)
    else:
        configPath = os.path.expanduser(defaultConfigPath)

    configValues = getConfigs(configPath) 
     
    # Sets the seperator
    if args.seperator is not None:
        seperator = args.seperator 
    elif configValues["seperator"] is not None:
        seperator = configValues["seperator"]
    else:
        seperator = defaultSeperator

    # Sets the file path
    if args.filePath is not None:
        filePath = os.path.expanduser(args.filePath)
    elif configValues["filePath"] is not None:
        filePath = os.path.expanduser(configValues["filePath"])
    else:
        filePath = defaultFilePath
    
    # Check early if bookmarks file exists
    if not os.path.isfile(filePath):
        missingBookmarksFile(filePath) 

    # Skip opening a book mark and just list them 
    if args.list is True:
        print(convertToList(filePath, seperator))
        exit()
  
    # Set the browser
    if args.browser is not None:
        browser = args.browser
    elif configValues["browser"] is not None:
        browser = configValues["browser"]
    elif os.getenv("BROWSER") is not None:
        browser = os.getenv("BROWSER")
    else:
        browser = defaultBrowser
    
    # Set useTerminal
    if args.useTerminal is not None:
        useTerminal = stringToBoolean(args.useTerminal)
    elif configValues["useTerminal"] is not None:
        useTerminal = configValues["useTerminal"]
    else:
        useTerminal = defaultUseTerminal
     
    # Don't bother setting terminal if it won't be used 
    if useTerminal is True:
        if args.terminal is not None:
            terminal = args.terminal
        elif configValues["terminal"] is not None:
            terminal = configValues["terminal"]
        elif os.getenv("TERM") is not None:
            terminal = os.getenv("TERM")
        else:
            terminal = defaultTerminal

    # Exit early if browser is set wrong 
    if shutil.which(browser) is None:
        missingBrowserFile(browser)
         
    # Attempt to open preselected bookmark
    if bookmarkName is not None: 
        openBookmark(findBookmark(bookmarkName, seperator, filePath), browser)
        exit()

    # Adds a new bookmark 
    if args.addBookmark is not None:
        addBookmark(filePath, seperator, args.addBookmark)
        exit()

    # Removes an old bookmark 
    if args.removeBookmark is not None:
        removeBookmark(filePath, seperator, args.removeBookmark)
        exit()
 
    # Set the launcher
    if args.launcher is not None:
        launcher = args.launcher
    elif os.getenv("LAUNCHER") is not None:
        launcher = os.getenv("LAUNCHER")
    else:
        launcher = defaultLauncher

    # Exit early if launcher is set wrong 
    if shutil.which(launcher) is None:
        missingLauncherFile(launcher)
              
    # Skip right to opening an address
    if bookmarkURL is not None:
        openBookmark(bookmarkURL, browser)

    # Open dialogue to find bookmark
    convertedFile = convertToNewLineSeperated(filePath, seperator)
    try:  
        launcherProcess = Popen([launcher], stdout=PIPE, stdin=PIPE, text=True)
        bookmarkName = launcherProcess.communicate(input=convertedFile)[0].strip()

    except FileNotFoundError:
        missingLauncherFile(launcher)

    if useTerminal is False:
        openBookmark(findBookmark(bookmarkName, seperator, filePath), browser)
    else: 
        openBookmark(findBookmark(bookmarkName, seperator, filePath), browser, terminal)

if __name__ == "__main__":
    main()
