#!/usr/bin/env python3
import os
from subprocess import Popen, PIPE, STDOUT
import argparse
import sys
import shutil

defaultBrowser = "firefox"
defaultLauncher = "dmenu"

def get_args():
    parser = argparse.ArgumentParser(
        prog = "bookmenu-py",
        description = "Typically used to seperate out your bookmarks from your browser " +
        "however may be suitable handling shorcuts to access files"
    )

    parser.add_argument(
        "-o",
        "--bookmark",
        help = "Selects which bookmark to open skipping the selection dialogue",
        metavar = "BOOKMARK"
    )

    parser.add_argument(
        "-u",
        "--url",
        help = "Skips selecting a bookmark and just loads an url directly",
        metavar = "BOOKMARK"
    )

    parser.add_argument(
        "-f",
        "--filePath",
        help = "Selects which file should be searched for bookmarks, the default"+
        " path is ~/.config/bookmenu/bookmarks",
        metavar = "FILE",
        default = "~/.config/bookmenu/bookmarks"
    )
     
    parser.add_argument(
        "-s",
        "--seperator",
        help = "Selects what bookmark seperator should be used, any character is supported"+
        " however it's recommended to choose something which is not a special character in"+
        " your bookmark format",
        metavar = "SEPERATOR",
        default = ","
    )
    
    parser.add_argument(
        "-l" ,
        "--launcher",
        help = "Sets the launcher to be used to select a bookmark to open, dmenu, rofi and tofi," +
        " are known to work but any app that accepts new line seperated data should" +
        " theorectically function",
        metavar = "LAUNCHER",
    )
     
    parser.add_argument(
        "-b" ,
        "--browser",
        help = "Sets the application used for opening the bookmark, browsers were the initial" +
        " intended use but works with anything that supports opening files in the " +
        " BROWSER BOOKMARK format, most text editors will also work",
        metavar = "BROWSER",
    )
     
    parser.add_argument(
        "-i" ,
        "--list",
        help = "Lists out all the bookmarks in the selected file, can be useful when skipping" +
        " launcher to open to open a bookmark directly",
        action="store_true"
    )

    args = parser.parse_args()

    return args

def missingBookmarksFile(filePath): 
    print("Bookmarks file: " + '"' + filePath + '"' + " does not exist", file=sys.stderr)
    exit()
    
def missingLauncherFile(launcher):
    print("Launcher: " + '"' + launcher + '"' + " not found", file=sys.stderr)            
    exit()
    
def missingBrowserFile(browser): 
    print("Browser: " + '"' + browser + "'" +  " does not exist", file=sys.stderr)
    exit()
    
def findBookmark(bookmarkName, seperator, filePath):
    try:
        f = open(filePath, "r")
    except FileNotFoundError:
        missingBookmarksFile(filePath)
    else:
        with open(filePath, "r") as bookmarksFile:
            for line in bookmarksFile:
                bookmark = line.split(seperator)
                if len(bookmark) == 2 and bookmark[0] == bookmarkName:
                    # Grab the URL
                    return bookmark[1]

    return ""

def openBookmark(bookmarkURL, browser):
    if bookmarkURL == "":
        print("No bookmark selected", file=sys.stderr)
        exit()

    try:  
        Popen([browser, bookmarkURL])
    except FileNotFoundError:
        missingBrowserFile(browser)

def convertToNewLineSeperated(filePath, seperator):
    convertedList = []
    try:
        f = open(filePath, "r")
    except FileNotFoundError:
        missingBookmarksFile(filePath)
    else:
        with open(filePath, "r") as bookmarksFile:
            for line in bookmarksFile:
                bookmark = line.split(seperator)
                if len(bookmark) == 2:
                    convertedList.append(bookmark[0] + "\n")
    
    # Guard against opening launcher with no bookmarks
    if len(convertedList) == 0:
        print("No bookmarks found, check if the file name " + '"' + filePath + '"' +
        " and seperator " + '"' + seperator + '"' + " are correct", file=sys.stderr)
        exit()

    # Sort string into alphabetical order
    convertedList.sort()
    convertedString = ""
    for bookmark in convertedList:
        convertedString = convertedString + bookmark
        
    return convertedString

def main():
    args = get_args()
    bookmarkURL = args.url
    bookmarkName = args.bookmark
    seperator = args.seperator 

    filePath = os.path.expanduser(args.filePath)
    
    # Check early if bookmarks file exists
    if not os.path.isfile(filePath):
        missingBookmarksFile(filePath)
    
    # Set the browser
    if args.browser != None:
        browser = args.browser
    elif os.getenv("BROWSER") != None:
        browser = os.getenv("BROWSER")
    else:
        browser = defaultBrowser

    # Exit early if browser is set wrong 
    if shutil.which(browser) == None:
        missingBrowserFile(browser)
     
    # Set the launcher
    if args.launcher != None:
        launcher = args.launcher
    elif os.getenv("LAUNCHER") != None:
        launcher = os.getenv("LAUNCHER")
    else:
        launcher = defaultLauncher

    # Exit early if launcher is set wrong 
    if shutil.which(launcher) == None:
        missingLauncherFile(launcher)
              
    # Skip right to opening an address
    if bookmarkURL != None:
        openBookmark(bookmarkURL, browser)

    # Open dialogue to find bookmark
    if bookmarkName == None:
        convertedFile = convertToNewLineSeperated(filePath, seperator)
        try: 
            launcherProcess = Popen([launcher], stdout=PIPE, stdin=PIPE, stderr=PIPE, text=True)
            bookmarkName = launcherProcess.communicate(input=convertedFile)[0].strip()
        except FileNotFoundError:
            missingLauncherFile(launcher)

        openBookmark(findBookmark(bookmarkName, seperator, filePath), browser)
    # Attempt to open preselected bookmark
    else:
        openBookmark(findBookmark(bookmarkName, seperator, filePath), browser)

if __name__ == "__main__":
    main()
